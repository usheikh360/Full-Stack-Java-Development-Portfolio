/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mthree.guessthenumberrestservice.data;

import com.mthree.guessthenumberrestservice.App;
import com.mthree.guessthenumberrestservice.models.Game;
import com.mthree.guessthenumberrestservice.models.Round;
import java.util.List;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.stereotype.Repository;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

/**
 *
 * @author umairsheikh
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = App.class)//helps set up the components to use behinde the scene
public class guessTheNumberDatabaseDaoTest {
    
    @Autowired
    guessTheNumberDao dao;
    
    public guessTheNumberDatabaseDaoTest() {
    }
    
    @Before
    public void setUp() {
        List <Game> games = dao.getAllGames();
        for(Game game: games){
            dao.deleteRoundsByGameId(game.getGameId());
            dao.deleteGameByGameId(game.getGameId());
        }   
    }
    
    @After
    public void finalise() {
        List <Game> games = dao.getAllGames();
        for(Game game: games){
            dao.deleteRoundsByGameId(game.getGameId());
            dao.deleteGameByGameId(game.getGameId());
        }   
    }
    
    /**
     * Test of createGame and getAllGames methods, of class guessTheNumberDatabaseDao.
     */
    @Test
    public void testCreateGameAndGetAllGames() {
        Game game1 = new Game();
        //THE GAME ID IS SET BY THE DATABASE
        game1.setGeneratedNumber("1234");
        game1.setStatus("finished");
        game1.setGuessed("yes");
        
        dao.createGame(game1);
        
        Game game2 = new Game();
        //THE GAME ID IS SET BY THE DATABASE
        game2.setGeneratedNumber("5678");
        game2.setStatus("finished");
        game2.setGuessed("yes"); 
        
        dao.createGame(game2);
        
        List<Game> games = dao.getAllGames();
        
        assertEquals(2, games.size());
//        assertTrue(games.contains(game1));
//        assertTrue(games.contains(game2)); 
        assertEquals("1234", games.get(0).getGeneratedNumber());
        assertEquals("5678", games.get(1).getGeneratedNumber());
    }

    /**
     * Test of getGameById method, of class guessTheNumberDatabaseDao.
     */
    @Test
    public void testGetGameById() {
        
        Game game1 = new Game();
        game1.setGeneratedNumber("1234");
        game1.setStatus("finished");
        game1.setGuessed("no"); 
        
        dao.createGame(game1);//will create the generated number
        //Because the gameId is set by the database, I first retrieve all the games in the database 
        //and then I get a game by it's gameId
        List <Game> games = dao.getAllGames();
        games = dao.getAllGames();
        
        Game gameFromDB = dao.getGameById(games.get(0).getGameId());
        assertEquals(game1.getGeneratedNumber(), gameFromDB.getGeneratedNumber());//Because I didn't know before hand, I am now confirming it is the same game by checking 
        //one of it's properties which is generatedNumber (the answer to the game) 
    }

    /**
     * Test of getListOfRoundsByGameId method, of class guessTheNumberDatabaseDao.
     */
    @Test
    public void testGetListOfRoundsByGameId() {
        Game game1 = new Game();
        game1.setGeneratedNumber("1234");
        game1.setStatus("finished");
        game1.setGuessed("no");
        
        dao.createGame(game1);
        
        List <Game> games = dao.getAllGames();//retrieving all the games so that I can find out the gameId as the gameId is generated by the database 
        
        //Below I am creating and adding rounds into the 'round' table
        Round round1 = new Round();
        round1.setGameId(games.get(0).getGameId());
        round1.setRoundNumber(1);
        round1.setResult("e:3p:0");
        
        //CREATED A SEPRATE METHOD FOR INSERTING INTO ROUNDS BECAUSE FOR THESE ROUNDS BECAUSE IT DOESN'T HAVE THE USER GUESSED NUMBER
        dao.insertIntoRoundForTest(round1);
        
        Round round2 = new Round();
        round2.setGameId(games.get(0).getGameId());
        round2.setRoundNumber(2);
        round2.setResult("e:2p:1");
        
        dao.insertIntoRoundForTest(round2);
        
        List<Round> rounds = dao.getListOfRoundsByGameId(games.get(0).getGameId());
        
        assertEquals(2, rounds.size());//Only 2 rounds were added so rounds.size() should equal 2
        assertEquals(1, rounds.get(0).getRoundNumber());
        assertEquals(2, rounds.get(1).getRoundNumber());
        //Below I am checking if what I have rtrieved from the database are the same rounds by checking the 'result' column of the 'round table'
        assertEquals("e:3p:0", rounds.get(0).getResult());
        assertEquals("e:2p:1", rounds.get(1).getResult());
        
    }
   
    /**
     * Test of getAnswerForGame method, of class guessTheNumberDatabaseDao.
     */
    @Test
    public void testGetAnswerForGame() {
        Game game1 = new Game();
        //THE GAME ID IS SET BY THE DATABASE
        game1.setGeneratedNumber("1234");
        game1.setStatus("finished");
        game1.setGuessed("yes");
        dao.createGame(game1);
        
        List <Game> games = dao.getAllGames();
        assertEquals("1234", dao.getAnswerForGame(games.get(0).getGameId()));
    }

    /**
     * Test of addGuess method, of class guessTheNumberDatabaseDao.
     */
    @Test
    public void testAddGuess() {//the addGuess method adds a new round entry into the 'round' table
        Game game1 = new Game();
        //THE GAME ID IS SET BY THE DATABASE
        game1.setGeneratedNumber("1234");
        game1.setStatus("finished");
        game1.setGuessed("yes");
        dao.createGame(game1);
        
        List <Game> games = dao.getAllGames();
        int[] artifiresultOfTheGuess = {1,3};//decided not to use the seprate method created for inserting rounds into round, 
        
        dao.addGuess(games.get(0).getGameId(), artifiresultOfTheGuess, "1342");
        
        assertNotNull(dao.addGuess(games.get(0).getGameId(), artifiresultOfTheGuess, "1342"));//Once the guess is added it should not return null
    }
    
}
